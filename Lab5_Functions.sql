--'selectCreate' function:
IF OBJECT_ID (N'dbo.selectCreate', N'IF') IS NOT NULL
	DROP FUNCTION dbo.selectCreate;
GO
CREATE FUNCTION dbo.selectCreate(@tableName varchar(100))
RETURNS TABLE
AS
RETURN
(

SELECT CONCAT('CREATE TABLE ', @tableName, '(') AS query
UNION ALL
SELECT CONCAT(c.COLUMN_NAME, ' ', c.DATA_TYPE,
    (CASE WHEN c.CHARACTER_MAXIMUM_LENGTH IS NOT NULL THEN CONCAT('(', c.CHARACTER_MAXIMUM_LENGTH, ')') END),
	(CASE WHEN (tc.CONSTRAINT_TYPE = 'PRIMARY KEY') THEN
		' PRIMARY KEY'
	WHEN (tc.CONSTRAINT_TYPE = 'FOREIGN KEY') THEN
		CONCAT(' FOREIGN KEY REFERENCES ', key2.TABLE_NAME, '(', key2.COLUMN_NAME, ')')
		END),
	(CASE WHEN (c.COLUMN_NAME IN (
		SELECT sysCol.Name FROM SYS.OBJECTS sysObj
		INNER JOIN SYS.COLUMNS sysCol ON sysObj.OBJECT_ID = sysCol.OBJECT_ID
		WHERE sysObj.Name = @tableName AND sysCol.IS_IDENTITY = 1
	)) THEN ' IDENTITY(1,1)' ELSE '' END),
	(CASE WHEN c.ORDINAL_POSITION IN (
	    SELECT COUNT(ORDINAL_POSITION) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @tableName
	) THEN '' ELSE ',' END))
	FROM INFORMATION_SCHEMA.COLUMNS c
	LEFT JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE key1 ON c.COLUMN_NAME = key1.COLUMN_NAME
	LEFT JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc ON key1.CONSTRAINT_NAME = rc.CONSTRAINT_NAME
	LEFT JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE key2 ON rc.UNIQUE_CONSTRAINT_NAME = key2.CONSTRAINT_NAME
	LEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc ON key1.CONSTRAINT_NAME = tc.CONSTRAINT_NAME
	WHERE c.TABLE_NAME = @tableName AND (key1.TABLE_NAME = @tableName OR key1.TABLE_NAME IS NULL)
UNION ALL
SELECT ');'

);

GO

--'getPricing' function (for rooms):
IF OBJECT_ID (N'dbo.getPricing', N'FN') IS NOT NULL
	DROP FUNCTION dbo.getPricing;
GO
CREATE FUNCTION dbo.getPricing(@roomID int, @amount int)
RETURNS int
AS
BEGIN
	DECLARE @result int;
	SELECT @result = r.Cost * @amount
		FROM Room r
		WHERE r.RoomID = @roomID;
	IF (@result IS NULL) SET @result = 0;
	RETURN @result;
END;

GO

--Statements to test the functions:
SELECT * FROM dbo.selectCreate('Guest') AS query;
SELECT dbo.getPricing(3, 5);
